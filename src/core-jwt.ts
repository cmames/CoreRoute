/**
 * Enum defining supported JWT algorithms in CoreJwt.
 *
 * @enum {string}
 * @readonly
 * @property {string} HS256 HMAC using SHA-256.
 * @property {string} RS256 RSA using SHA-256.
 */
export enum JwtAlgorithmType {
    HS256 = 'HS256',
    RS256 = 'RS256'
}

export class CoreJwt {
    static readonly SUPPORTED_ALGORITHMS: JwtAlgorithmType[] = [JwtAlgorithmType.HS256, JwtAlgorithmType.RS256]; // ‚úÖ Constante statique pour la VALIDATION (avec enum)
    #key: string;
    #algorithm: JwtAlgorithmType; // Utilisation du type alias JwtAlgorithmType pour #algorithm

    /**
     * Constructor for the CoreJwt class.
     * Initializes a new CoreJwt instance with a secret key and algorithm.
     *
     * @param {string} secretOrPrivateKey - The secret key (for symmetric algorithms like HS256) or the private key (for asymmetric algorithms like RS256) as a string.
     *                                    For RS256, it's recommended to use the static factory method `getRS256`.
     * @param {JwtAlgorithmType} [algorithm='HS256'] - The JWT signing algorithm to use. Defaults to 'HS256' if not provided.
     *                                        Supported algorithms are {@link JwtAlgorithmType}.
     *
     * @throws {Error} If the provided algorithm is not a valid {@link JwtAlgorithmType}.
     *
     * @example
     * // Create a CoreJwt instance for HS256 algorithm
     * const jwtHS256 = new CoreJwt('your-secret-key');
     *
     * @example
     * // Create a CoreJwt instance for RS256 algorithm (using private key - recommended to use getRS256 factory)
     * const jwtRS256 = new CoreJwt('-----BEGIN RSA PRIVATE KEY...-----', 'RS256'); // Not recommended for direct constructor use in RS256
     */
    constructor(secretOrPrivateKey: string, algorithm: JwtAlgorithmType = 'HS256') { // Utilisation du type alias JwtAlgorithmType pour le param√®tre algorithm
        this.#key = secretOrPrivateKey;
        if (algorithm === undefined) {
            this.#algorithm = 'HS256' as JwtAlgorithmType; 
        } else {
            this.#algorithm = algorithm;
        }
        const supportedAlgorithms: JwtAlgorithmType[] = ['HS256', 'RS256']; // Utilisation de JwtAlgorithmType[] pour le type du tableau
        if (!supportedAlgorithms.includes(this.#algorithm)) {
            throw new Error(`Unsupported JWT algorithm: ${this.#algorithm}. Supported algorithms are: ${supportedAlgorithms.join(', ')} (valid values from JwtAlgorithmType)`);
        }
    }

    /**
     * Signe un payload (charge utile) avec l'algorithme et la cl√© configur√©s.
     * @param {any} payload - Le payload JSON √† signer. Peut √™tre n'importe quel type de donn√©es s√©rialisable en JSON.
     * @returns {string} Le JWT sign√©, sous forme de cha√Æne de caract√®res.
     */
    sign(payload: any): string {
        try {
            // ‚ö†Ô∏è Int√©grez ici la logique de signature JWT en utilisant une biblioth√®que comme 'jsonwebtoken'
            //    Exemple avec jsonwebtoken (√† adapter selon votre biblioth√®que) :
            const signedToken = jwt.sign(
                payload,
                this.#key,
                { algorithm: this.#algorithm } // Utilisez this.#algorithm (type enum JwtAlgorithmType)
            );
            return signedToken;
        } catch (error) {
            console.error("Erreur lors de la signature JWT:", error);
            throw new Error(`JWT signing failed: ${error instanceof Error ? error.message : String(error)}`);
        }
    }

    /**
     * V√©rifie un JWT en utilisant la cl√© et l'algorithme configur√©s.
     * @param {string} token - Le JWT √† v√©rifier.
     * @returns {any} Le payload d√©cod√© si la signature est valide et la v√©rification r√©ussit.
     * @throws {Error} Si la signature est invalide ou si une erreur survient lors de la v√©rification.
     */
    verify(token: string): any {
        try {
            // ‚ö†Ô∏è Int√©grez ici la logique de v√©rification JWT en utilisant une biblioth√®que comme 'jsonwebtoken'
            //    Exemple avec jsonwebtoken (√† adapter selon votre biblioth√®que) :
            const decodedPayload = jwt.verify(
                token,
                this.#key,
                { algorithms: [this.#algorithm] } // Utilisez un tableau contenant this.#algorithm (type enum JwtAlgorithmType)
            );
            return decodedPayload; // üöÄ Retourne le payload d√©cod√© si la v√©rification r√©ussit
        } catch (error) {
            // ‚ö†Ô∏è G√©rez les erreurs de v√©rification (par exemple, signature invalide, token expir√©, etc.)
            console.error("Erreur lors de la v√©rification JWT:", error);
            throw new Error(`JWT verification failed: ${error instanceof Error ? error.message : String(error)}`); // ‚ùå Lancez une erreur si la v√©rification √©choue
        }
    }

    /**
     * D√©code un JWT sans v√©rifier sa signature. Permet d'inspecter le header et le payload.
     * @param {string} token - Le JWT √† d√©coder.
     * @returns {any} Un objet contenant le header et le payload d√©cod√©s.
     *                 Par exemple: { header: { ... }, payload: { ... } }.
     */
    decode(token: string): any;

    /**
     * M√©thode factory statique pour cr√©er une instance de CoreJwt configur√©e pour l'algorithme HS256.
     * @param {string} secretKey - La cl√© secr√®te √† utiliser pour HS256.
     * @returns {CoreJwt} Une instance de CoreJwt configur√©e pour HS256.
     */
    static getHS256(secretKey: string): CoreJwt;

    /**
     * M√©thode factory statique pour cr√©er une instance de CoreJwt configur√©e pour l'algorithme RS256.
     * @param {string} publicKey - La cl√© publique RSA pour la v√©rification (et potentiellement pour le chiffrement JWE futur).
     * @param {string} privateKey - La cl√© priv√©e RSA pour la signature et le chiffrement (si JWE est impl√©ment√©).
     * @returns {CoreJwt} Une instance de CoreJwt configur√©e pour RS256.
     */
    static getRS256(publicKey: string, privateKey: string): CoreJwt;
}